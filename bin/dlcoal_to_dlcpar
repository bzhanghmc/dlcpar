#!/usr/bin/env python

VERSION = "1.0.0"

# python libraries
import os, sys, optparse
import StringIO

# dlcpar libraries
import dlcpar
from dlcpar import common
from dlcpar import phyloDLC

# rasmus and compbio libraries
from rasmus import treelib, util
from compbio import phylo

#==========================================================
# parser

def parse_args():
    """parse input arguments"""
    
    parser = optparse.OptionParser(
        usage = "usage: %prog [options] <gene tree> ...",
        
        version = "%prog " + VERSION,

        description =
             "dlcoal_to_dlcpar is a utility for converting dlcoal reconciliations " +
	     "to a reconciliation file with gene tree nodes labeled as " +
	     "speciation, duplication, or deep coalescence.",

        epilog =
             "Written by Yi-Chieh Wu (yjw@mit.edu), Massachusetts Institute of Technology. " +
             "(c) 2012. Released under the terms of the GNU General Public License.")

    grp_io = optparse.OptionGroup(parser, "Input/Output")
    common.add_common_options(grp_io, 
                              infiles=True,
			      stree=True, smap=True)

    grp_ext = optparse.OptionGroup(parser, "File Extensions")
    grp_ext.add_option("-I","--inputext", dest="inputext",
	               metavar="<input file extension>",
	               default=".coal.tree",
	               help="input file extension (default: \".coal.tree\")")
    grp_ext.add_option("-O", "--outputext", dest="outputext",
                       metavar="<output file extension>",
                       default=".dlcpar",
                       help="output file extension (default: \".dlcpar.recon\")")
    parser.add_option_group(grp_ext)

    grp_info = optparse.OptionGroup(parser, "Information")
    common.move_option(parser, "--version", grp_info)
    common.move_option(parser, "--help", grp_info)
    parser.add_option_group(grp_info)

    options, args = parser.parse_args()
    if not options.input and len(args) == 0:
        parser.print_help()
	sys.exit(1)

    #=============================
    # check arguments

    # required options
    common.check_req_options(parser, options, species=True)

    # input gene tree files
    treefiles = common.get_input_files(parser, options, args)
    if len(treefiles) == 0:
        parser.error("must specify input file(s)")

    return options, treefiles

#==========================================================
# main

def main():
    """main"""
    
    # parse arguments
    options, treefiles = parse_args()

    # read species tree and species map
    stree = treelib.read_tree(options.stree)
    gene2species = phylo.read_gene2species(options.smap)

    # process genes trees
    for treefile in treefiles:

        # read dlcoal_recon files
	prefix = util.replace_ext(treefile, options.inputext, "")
	locus_tree = treelib.read_tree(prefix + ".locus.tree")
	locus_recon, locus_events = phylo.read_recon_events(prefix + ".locus.recon", locus_tree, stree)
	coal_tree = treelib.read_tree(prefix + ".coal.tree")
	coal_recon, coal_events = phylo.read_recon_events(prefix + ".coal.recon", coal_tree, locus_tree)

        # convert
	dlc_recon = phyloDLC.infer_coal(coal_tree, coal_recon,
	                                locus_tree, locus_recon)
	
	# output
	outfile = util.replace_ext(treefile, options.inputext, options.outputext)
	phyloDLC.write_recon(recon, outfile)


# main function
if __name__ == "__main__":
    main()
