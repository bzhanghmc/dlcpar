#!/usr/bin/env python

# python libraries
import os, sys, optparse
import time
import random
import StringIO

# dlcpar libraries
import dlcpar
from dlcpar import common, reconlib
import dlcpar.recon

# rasmus and compbio libraries
from rasmus import treelib, util
from compbio import phylo, alignlib

#==========================================================
# parser

VERSION = dlcpar.PROGRAM_VERSION_TEXT

def move_option(parser, opt_str, opt_grp):
    """Move option 'opt_str' from 'parser' to 'opt_grp'"""
    if parser.has_option(opt_str):
        opt = parser.get_option(opt_str)
        parser.remove_option(opt_str)
        opt_grp.add_option(opt)

def parse_args():
    """parse input arguments"""
    
    parser = optparse.OptionParser(
        usage = "usage: %prog [options] <gene tree> ...",
        
        version = "%prog " + VERSION,

        description =
             "dlcpar is a phylogenetic program for finding " +
             "the most parsimonious gene tree-species tree reconciliation " +
	     "by inferring speciation, duplication, loss, and deep coalescence events. " +
	     "See http://compbio.mit.edu/dlcpar for details.",
             
        epilog =
             "Written by Yi-Chieh Wu (yjw@mit.edu), Massachusetts Institute of Technology. " +
             "(c) 2012. Released under the terms of the GNU General Public License.")

    grp_io = optparse.OptionGroup(parser, "Input/Output")
    grp_io.add_option("-s", "--stree", dest="stree",
	              metavar="<species tree>",
		      help="species tree file in newick format")
    grp_io.add_option("-S", "--smap", dest="smap",
	              metavar="<species map>",
	              help="gene to species map")
    parser.add_option_group(grp_io)

    grp_ext = optparse.OptionGroup(parser, "File Extensions")
    grp_ext.add_option("-I","--inputext", dest="inext",
	               metavar="<input file extension>",
	               default="",
	               help="input file extension (default: \"\")")
    grp_ext.add_option("-O", "--outputext", dest="outext",
                       metavar="<output file extension>",
                       default=".dlcpar",
                       help="output file extension (default: \".dlcpar\")")
    parser.add_option_group(grp_ext)

    grp_costs = optparse.OptionGroup(parser, "Costs")
    grp_costs.add_option("-D", "--dupcost", dest="dupcost",
                         metavar="<dup cost>",
                         default=1.0, type="float",
                         help="duplication cost (default: 1.0)")
    grp_costs.add_option("-L", "--losscost", dest="losscost",
                         metavar="<loss cost>",
                         default=1.0, type="float",
                         help="loss cost (default: 1.0)")
    grp_costs.add_option("-C", "--coalcost", dest="coalcost",
                         metavar="<coal cost>",
                         default=1.0, type="float",
                         help="deep coalescence cost (default: 1.0)")
    grp_costs.add_option("--explicit", dest="explicit",
                         default=False, action="store_true",
                         help="set to ignore extra lineages at implied speciation nodes")
    grp_costs.add_option("--no_delay", dest="delay",
                         default=True, action="store_false",
                         help="set to disallow delay between coalescence and speciation")
    parser.add_option_group(grp_costs)

    grp_misc = optparse.OptionGroup(parser, "Miscellaneous")
    grp_misc.add_option("-x", "--seed", dest="seed",
                        metavar="<random seed>",
                        type="int", default=None,
                        help="random number seed")
    grp_misc.add_option("--output_format", dest="output_format",
                        choices=["dlcpar","dlcoal"], default="dlcpar",
                        metavar="[dlcpar|dlcoal]",
                        help="specify output format (default: labeled coalescent tree format)")
    parser.add_option_group(grp_misc)

    grp_info = optparse.OptionGroup(parser, "Information")
    move_option(parser, "--version", grp_info)
    move_option(parser, "--help", grp_info)
    grp_info.add_option("-l", "--log", dest="log",
                        action="store_true",
                        help="if given, output debugging log")
    parser.add_option_group(grp_info)

    options, treefiles = parser.parse_args()
    if len(treefiles) == 0:
        parser.print_help()
	sys.exit(1)

    #=============================
    # check arguments

    # required options
    if (not options.stree) or (not options.smap):
        parser.error("-s/--stree and -S/--smap required")

    return options, treefiles


#==========================================================
# utilities

def check_tree(tree, name=""):
    """Ensure that tree is binary"""
    for node in tree:
        if len(node.children) not in (0, 2):
            raise Exception("tree is not binary: %s" % name)

        
#==========================================================
# main

def main():
    """main"""
    
    # parse arguments
    options, treefiles = parse_args()

    # read species tree and species map
    stree = treelib.read_tree(options.stree)
    gene2species = phylo.read_gene2species(options.smap)

    # process genes trees
    for treefile in treefiles:
        # start logging
        if options.log:
            log_out = util.open_stream(util.replace_ext(treefile, options.inext, options.outext + ".log"), 'w')
        else:
            log_out = common.NullLog()
        
        # set random seed
        if options.seed is None:
            options.seed = int(time.time() * 100)
        random.seed(options.seed)
        log_out.write("seed: %d\n" % options.seed)

        # read and prepare coal tree
        coal_trees = list(treelib.iter_trees(treefile))

        for coal_tree in coal_trees:
            check_tree(coal_tree, treefile)

            # remove bootstrap and distances if they exist
            coal_tree_top = coal_tree.copy()
            for node in coal_tree_top:
                if "boot" in node.data:
                    del node.data["boot"]
                node.dist = 0
            coal_tree_top.default_data.clear()

            # perform reconciliation
            gene_tree, labeled_recon = dlcpar.recon.dlc_recon(
                coal_tree_top, stree, gene2species,
                dupcost=options.dupcost, losscost=options.losscost, coalcost=options.coalcost,
                implied=not options.explicit, delay=options.delay,
                log=log_out)

        # make "consensus" reconciliation if multiple coal trees given
        if len(coal_trees) > 1:
            raise Exception("unsupported: multiple coal trees per file")

        # write outputs
        out = util.replace_ext(treefile, options.inext, options.outext)
        if options.output_format == "dlcoal":
            coal_tree, recon = reconlib.labeledrecon_to_recon(gene_tree, labeled_recon, stree)
            recon.write(out, coal_tree)
        else:
            labeled_recon.write(out, gene_tree)
        
        # end logging
        if options.log:
            log_out.close()


# main function
if __name__ == "__main__":
    main()
