#!/usr/bin/env python
# adapted from projects/rasmus/bin/vistrans

import os, sys
import optparse

import dlcpar

from rasmus import treelib, util
from compbio import phylo

from dlcpar import reconlib
from dlcpar.vis import reconsvg


o = optparse.OptionParser(usage="%prog [options] <filename prefix>")
o.add_option("-s", "--stree", dest="stree",
             metavar="<species tree>",
             help="species tree (newick format)")
o.add_option("-v", "--viewer", dest="viewer",
             metavar="<svg viewer>",
             default="display")
o.add_option("--xscale", dest="xscale",
             metavar="<x-scaling>",
             type="float", default=50)
o.add_option("--yscale", dest="yscale",
             metavar="<y-scaling>",
             type="float", default=50)
o.add_option("--names", dest="names",
             action="store_true",
             default=False,
             help="display internal node names")
o.add_option("--snames", dest="snames",
             action="store_true",
             default=False,
             help="display species names")
o.add_option("-o", "--output", dest="output",
             metavar="<output>")


#=============================================================================
# main

conf, args = o.parse_args()

stree = treelib.read_tree(conf.stree)
gtree, extra = reconlib.read_labeled_recon(args[0], stree)

# output
if conf.output:
    stream = conf.output
else:
    stream = os.popen(conf.viewer, "w")

# label node names
labels = {}
if conf.names:
    for node in gtree:
        if not node.is_leaf():
            labels[node.name] = "[%s]" % node.name

# label species names
slabels = {}
if conf.snames:
    for snode in stree:
        if not snode.is_leaf():
            slabels[snode.name] = "%s" % snode.name

# draw tree
reconsvg.draw_tree(gtree, stree, extra, filename=stream,
                   xscale=conf.xscale, yscale=conf.yscale,
                   labels=labels,
                   slabels=slabels)

if not conf.output:
    stream.close()
