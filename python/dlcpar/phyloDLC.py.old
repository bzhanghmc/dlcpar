#
# Phylogeny functions for dup/loss/coal
# Yi-Chieh Wu 2012
#
# See also phylo.py in compbio libraries
#

from rasmus import util
from compbio import phylo, coal

def add_implied_spec_nodes(coal_tree, stree, coal_recon, coal_events):
    """adds speciation nodes to tree that are implied but are not present"""
    added_nodes = []
    return added_nodes

def make_locus_tree(coal_tree, coal_recon, coal_events):
    """make the locus tree implied by the coal tree and its reconciliation"""
    locus_tree = None
    locus_recon = None
    locus_events = None
    return locus_tree, locus_recon, locus_events

def infer_coal(coal_tree, coal_recon,
               locus_tree, locus_recon):
    """infer deep coal events on the coal tree by looking at the three-tree-model
       of reconciliation"""
    
    recon = {}
    events = {}

    # how many gene nodes per species (locus nodes)
    # how many descendent nodes recon to the same species (locus nodes)
    nodes_per_lnodes, descend_nodes = coal.get_topology_stats(coal_tree, coal_recon, locus_tree)

    for node in coal_tree:
        lnode = coal_recon[node]
	snode = locus_recon[lnode]
	nlineages = lineages[lnode]

        recon[node] = snode
        if node.is_leaf():
	    events[node] = "gene"
	elif lineages[lnode][0] == 1:
	    events[node] = "none"
	else:
	    raise Exception("invalid event %s at node %s" % (event, node.name))
    
    return recon, events

def infer_coal_by_dcs(tree, recon, events, dupcons=None, thr=0.25, eq=True):
    """infer deep coal events by using dup consistency score
       if DCS <= thr, infer deep coal event instead of duplication event
       if not eq, use DCS < thr instead
    """
    if dupcons is None:
        dupcons = phylo.dup_consistency(tree, recon, events)

    for node, score in dupcons.iteritems():
        if (score < thr) or (eq and score == thr):
	    events[node] = "coal"
    return events

